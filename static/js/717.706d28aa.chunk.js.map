{"version":3,"file":"static/js/717.706d28aa.chunk.js","mappings":"uQAEaA,EAAYC,EAAAA,GAAAA,GAAH,oTAcTC,EAAOD,EAAAA,GAAAA,GAAH,0iBAkBJE,EAAQF,EAAAA,GAAAA,IAAH,sBAELG,EAAYH,EAAAA,GAAAA,GAAH,yGAOTI,EAAoBJ,EAAAA,GAAAA,EAAH,6G,SCvCvB,SAASK,EAAT,GAAyB,IAATC,EAAQ,EAARA,KACrB,OACE,+BACE,SAACP,EAAD,UACGO,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAb,OACR,UAACT,EAAD,WACGS,GACC,SAACR,EAAD,CACES,IAAG,0CAAqCD,GACxCE,IAAKH,KAGP,gBAAKE,IAAKE,EAAWD,IAAKH,EAAMK,MAAO,IAAKC,OAAQ,OAGtD,SAACZ,EAAD,UAAYM,MAVHD,EADH,OAiBjB,CCnBc,SAASQ,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOb,EAAP,KAAac,EAAb,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeL,GAASM,MAAK,SAAAC,GAC3B,IAAMC,EAAe,GACrBD,EAAElB,KAAKC,KAAI,YAA0C,IAC7CmB,EAAQ,CACZlB,GAFgD,EAAtCA,GAGVC,KAHgD,EAAlCkB,cAIdjB,MAJgD,EAAnBkB,cAM/B,OAAOH,EAAaI,KAAKH,EAC1B,IACDN,EAAQK,EACT,GACF,GAAE,CAACR,IAEGX,GAAQA,EAAKwB,OAAS,GAC3B,SAACzB,EAAD,CAAMC,KAAMA,KAEZ,SAACF,EAAD,gDAEH,C,mMC5BK2B,EAAM,+BACNC,EAAM,mCAEL,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,8EACCC,EADD,UACUJ,EADV,iCACsCC,EADtC,kBACmDE,EADnD,oBAEQE,EAAAA,EAAAA,IAAA,UAAaD,IAAOZ,MAAK,SAAAc,GAAQ,OAAIA,EAASC,IAAb,IAFzC,0GAKA,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,2FACCC,EADD,UACkBT,EADlB,uCACoDC,EADpD,SACgE,GADhE,SAEQI,EAAAA,EAAAA,IAAA,UAAaI,IAAejB,MAAK,SAAAc,GAAQ,OAAIA,EAASC,IAAb,IAFjD,0GAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAiCxB,GAAjC,8EACCyB,EADD,UACiBX,EADjB,kBAC8Bd,EAD9B,oBACiDe,EADjD,4BAEQI,EAAAA,EAAAA,IAAA,UAAaM,IAAcnB,MAAK,SAAAc,GAAQ,OAAIA,EAASC,IAAb,IAFhD,0GAKA,SAAehB,EAAtB,+CAAO,OAAP,oBAAO,WAA8BL,GAA9B,8EACC0B,EADD,UACcZ,EADd,kBAC2Bd,EAD3B,4BACsDe,GADtD,SAEQI,EAAAA,EAAAA,IAAA,UAAaO,IAAWpB,MAAK,SAAAc,GAAQ,OAAIA,EAASC,IAAb,IAF7C,0GAKA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAkC3B,GAAlC,8EACC4B,EADD,UACiBd,EADjB,kBAC8Bd,EAD9B,4BACyDe,EADzD,mCAEQI,EAAAA,EAAAA,IAAA,UAAaS,IAActB,MAAK,SAAAc,GAAQ,OAAIA,EAASC,IAAb,IAFhD,0G","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/pages/Cast.js","components/services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastsList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 50px 80px 90px;\n`;\n\nexport const Item = styled.li`\n  padding: 10px;\n  border-radius: 2px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  &:hover {\n    transform: scale(1.05);\n    cursor: zoom-in;\n  }\n`;\n\nexport const Photo = styled.img``;\n\nexport const ActorName = styled.h3`\n  margin-top: 10px;\n  font-size: 15px;\n  font-weight: 500;\n  color: #585858;\n`;\n\nexport const NoInformationText = styled.p`\n  display: flex;\n  justify-content: center;\n  padding: 20px;\n  font-weight: 500;\n`;\n","import PropTypes from 'prop-types';\nimport actorIcon from '../images/noActor.png';\nimport { CastsList, Item, Photo, ActorName } from './Cast.styled';\n\nexport function Cast({ cast }) {\n  return (\n    <>\n      <CastsList>\n        {cast.map(({ id, name, photo }) => (\n          <Item key={id}>\n            {photo ? (\n              <Photo\n                src={`https://image.tmdb.org/t/p/w300/${photo}`}\n                alt={name}\n              />\n            ) : (\n              <img src={actorIcon} alt={name} width={300} height={450} />\n            )}\n\n            <ActorName>{name}</ActorName>\n          </Item>\n        ))}\n      </CastsList>\n    </>\n  );\n}\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      photo: PropTypes.string,\n    })\n  ).isRequired,\n};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'components/services/api';\nimport { Cast } from 'components/Cast/Cast';\nimport { NoInformationText } from 'components/Cast/Cast.styled';\n\nexport default function CastPage() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    fetchMovieCast(movieId).then(r => {\n      const mappedActors = [];\n      r.cast.map(({ id, original_name, profile_path }) => {\n        const actor = {\n          id: id,\n          name: original_name,\n          photo: profile_path,\n        };\n        return mappedActors.push(actor);\n      });\n      setCast(mappedActors);\n    });\n  }, [movieId]);\n\n  return cast && cast.length > 0 ? (\n    <Cast cast={cast} />\n  ) : (\n    <NoInformationText>Sorry, we have no information here</NoInformationText>\n  );\n}","import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3';\nconst KEY = 'c8d20ee8a9e8ed9b29c68c787df9586c';\n\nexport async function fetchMoviesBySearch(query) {\n  const url = `${URL}/search/movie?api_key=${KEY}&query=${query}&page=1`;\n  return await axios.get(`${url}`).then(response => response.data);\n}\n\nexport async function fetchTrendingMovies() {\n  const trendingURL = `${URL}/trending/movie/day?api_key=${KEY}&page=${1}`;\n  return await axios.get(`${trendingURL}`).then(response => response.data);\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const detailsURL = `${URL}/movie/${movieId}?api_key=${KEY}&language=en-US`;\n  return await axios.get(`${detailsURL}`).then(response => response.data);\n}\n\nexport async function fetchMovieCast(movieId) {\n  const castURL = `${URL}/movie/${movieId}/credits?api_key=${KEY}`;\n  return await axios.get(`${castURL}`).then(response => response.data);\n}\n\nexport async function fetchMoviesReviews(movieId) {\n  const reviewsURL = `${URL}/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`;\n  return await axios.get(`${reviewsURL}`).then(response => response.data);\n}"],"names":["CastsList","styled","Item","Photo","ActorName","NoInformationText","Cast","cast","map","id","name","photo","src","alt","actorIcon","width","height","CastPage","movieId","useParams","useState","setCast","useEffect","fetchMovieCast","then","r","mappedActors","actor","original_name","profile_path","push","length","URL","KEY","fetchMoviesBySearch","query","url","axios","response","data","fetchTrendingMovies","trendingURL","fetchMovieDetails","detailsURL","castURL","fetchMoviesReviews","reviewsURL"],"sourceRoot":""}